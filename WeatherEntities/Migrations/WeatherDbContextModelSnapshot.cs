// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WeatherEntities;

#nullable disable

namespace WeatherEntities.Migrations
{
    [DbContext(typeof(WeatherDbContext))]
    partial class WeatherDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WeatherEntities.Entities.FileEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("upload_date");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("files");
                });

            modelBuilder.Entity("WeatherEntities.Entities.WeatherTrackEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<short>("CloudCover")
                        .HasColumnType("smallint")
                        .HasColumnName("cloud_cover");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<double>("DewPointTemperature")
                        .HasColumnType("double precision")
                        .HasColumnName("dew_point_temperature");

                    b.Property<long>("FileId")
                        .HasColumnType("bigint")
                        .HasColumnName("file_id");

                    b.Property<int>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<int>("PressureOfMercuryColumn")
                        .HasColumnType("integer")
                        .HasColumnName("pressure_of_mercury_column");

                    b.Property<double>("RelativeHumidity")
                        .HasColumnType("double precision")
                        .HasColumnName("relative_humidity");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision")
                        .HasColumnName("temperature");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_only");

                    b.Property<int>("VVMeasureMeasurement")
                        .HasColumnType("integer")
                        .HasColumnName("vv_wind_assessment");

                    b.Property<short>("VisibilityVariable")
                        .HasColumnType("smallint")
                        .HasColumnName("visibility_variable");

                    b.Property<string>("WeatherPhenomena")
                        .HasColumnType("text")
                        .HasColumnName("weather_phenomena");

                    b.Property<short>("WindSpeed")
                        .HasColumnType("smallint")
                        .HasColumnName("wind_speed");

                    b.Property<int>("WindType")
                        .HasColumnType("integer")
                        .HasColumnName("wind_direction");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("Date", "Time")
                        .IsUnique()
                        .HasDatabaseName("IX_WeatherTrackEntity_Field1_Field2");

                    b.ToTable("days");
                });

            modelBuilder.Entity("WeatherEntities.Entities.WeatherTrackEntity", b =>
                {
                    b.HasOne("WeatherEntities.Entities.FileEntity", null)
                        .WithMany("Weather")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeatherEntities.Entities.FileEntity", b =>
                {
                    b.Navigation("Weather");
                });
#pragma warning restore 612, 618
        }
    }
}
